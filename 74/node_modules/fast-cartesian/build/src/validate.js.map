{"version":3,"sources":["../../src/validate.js"],"names":["validateInput","arrays","Array","isArray","TypeError","forEach","validateArray","validateDimensions","validateCombinations","array","length","MAX_DIMENSIONS","size","reduce","multiplySize","MAX_SIZE","sizeStr","Number","isFinite","toExponential"],"mappings":";AACO,KAAMA,CAAAA,aAAa,CAAG,SAAUC,MAAV,CAAkB;AAC7C,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,CAA4B;AAC1B,KAAM,IAAIG,CAAAA,SAAJ,CAAc,qCAAd,CAAN;AACD;;AAEDH,MAAM,CAACI,OAAP,CAAeC,aAAf;AACAC,kBAAkB,CAACN,MAAD,CAAlB;AACAO,oBAAoB,CAACP,MAAD,CAApB;AACD,CARM,C;;AAUP,KAAMK,CAAAA,aAAa,CAAG,SAAUG,KAAV,CAAiB;AACrC,GAAI,CAACP,KAAK,CAACC,OAAN,CAAcM,KAAd,CAAL,CAA2B;AACzB,KAAM,IAAIL,CAAAA,SAAJ,CAAe,8BAA6BK,KAAM,EAAlD,CAAN;AACD;AACF,CAJD;;;;;AASA,KAAMF,CAAAA,kBAAkB,CAAG,SAAU,CAAEG,MAAF,CAAV,CAAsB;AAC/C,GAAIA,MAAM,EAAIC,cAAd,CAA8B;AAC5B,KAAM,IAAIP,CAAAA,SAAJ;AACH,oBAAmBM,MAAO,uEADvB,CAAN;;AAGD;AACF,CAND;;AAQA,KAAMC,CAAAA,cAAc,CAAG,GAAvB;;;AAGA,KAAMH,CAAAA,oBAAoB,CAAG,SAAUP,MAAV,CAAkB;AAC7C,KAAMW,CAAAA,IAAI,CAAGX,MAAM,CAACY,MAAP,CAAcC,YAAd,CAA4B,CAA5B,CAAb;;AAEA,GAAIF,IAAI,EAAIG,QAAZ,CAAsB;AACpB,KAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACC,QAAP,CAAgBN,IAAhB,EAAyB,KAAIA,IAAI,CAACO,aAAL,CAAmB,CAAnB,CAAsB,GAAnD,CAAwD,EAAxE;AACA,KAAM,IAAIf,CAAAA,SAAJ;AACH,wBAAuBY,OAAQ,sEAD5B,CAAN;;AAGD;AACF,CATD;;AAWA,KAAMF,CAAAA,YAAY,CAAG,SAAUF,IAAV,CAAgBH,KAAhB,CAAuB;AAC1C,MAAOG,CAAAA,IAAI,CAAGH,KAAK,CAACC,MAApB;AACD,CAFD;;;AAKA,KAAMK,CAAAA,QAAQ,CAAG,GAAK,EAAtB","sourcesContent":["// Validate 'array()' input\nexport const validateInput = function (arrays) {\n  if (!Array.isArray(arrays)) {\n    throw new TypeError('Argument must be an array of arrays')\n  }\n\n  arrays.forEach(validateArray)\n  validateDimensions(arrays)\n  validateCombinations(arrays)\n}\n\nconst validateArray = function (array) {\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Argument must be an array: ${array}`)\n  }\n}\n\n// Maximum number of nested `for` loops. In my machine, it's 604 but it is\n// engine-specific so we use a safe number. Above the limit, a max call stack\n// error is thrown by the engine.\nconst validateDimensions = function ({ length }) {\n  if (length >= MAX_DIMENSIONS) {\n    throw new TypeError(\n      `Too many arrays (${length}): please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    )\n  }\n}\n\nconst MAX_DIMENSIONS = 1e2\n\n// Max array size in JavaScript. This is the limit of the final return value.\nconst validateCombinations = function (arrays) {\n  const size = arrays.reduce(multiplySize, 1)\n\n  if (size >= MAX_SIZE) {\n    const sizeStr = Number.isFinite(size) ? ` (${size.toExponential(0)})` : ''\n    throw new TypeError(\n      `Too many combinations${sizeStr}: please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    )\n  }\n}\n\nconst multiplySize = function (size, array) {\n  return size * array.length\n}\n\n// eslint-disable-next-line no-magic-numbers\nconst MAX_SIZE = 2 ** 32\n"],"file":"src/validate.js"}