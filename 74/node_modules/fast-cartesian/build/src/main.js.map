{"version":3,"sources":["../../src/main.js"],"names":["fastCartesian","arrays","length","loopFunc","getLoopFunc","result","cachedLoopFunc","cache","undefined","mGetLoopFunc","indexes","Array","from","getIndex","start","map","index","join","middle","end","repeat","Function","value","String","module","exports"],"mappings":"aAAA;;;;;AAKA,KAAMA,CAAAA,aAAa,CAAG,SAAUC,MAAV,CAAkB;AACtC,4BAAcA,MAAd;;AAEA,GAAIA,MAAM,CAACC,MAAP,GAAkB,CAAtB,CAAyB;AACvB,MAAO,EAAP;AACD;;AAED,KAAMC,CAAAA,QAAQ,CAAGC,WAAW,CAACH,MAAM,CAACC,MAAR,CAA5B;AACA,KAAMG,CAAAA,MAAM,CAAG,EAAf;AACAF,QAAQ,CAACF,MAAD,CAASI,MAAT,CAAR;AACA,MAAOA,CAAAA,MAAP;AACD,CAXD;;AAaA,KAAMD,CAAAA,WAAW,CAAG,SAAUF,MAAV,CAAkB;AACpC,KAAMI,CAAAA,cAAc,CAAGC,KAAK,CAACL,MAAD,CAA5B;;AAEA,GAAII,cAAc,GAAKE,SAAvB,CAAkC;AAChC,MAAOF,CAAAA,cAAP;AACD;;AAED,KAAMH,CAAAA,QAAQ,CAAGM,YAAY,CAACP,MAAD,CAA7B;;AAEAK,KAAK,CAACL,MAAD,CAAL,CAAgBC,QAAhB;AACA,MAAOA,CAAAA,QAAP;AACD,CAXD;;AAaA,KAAMI,CAAAA,KAAK,CAAG,EAAd;;;;;;;;;;;AAWA,KAAME,CAAAA,YAAY,CAAG,SAAUP,MAAV,CAAkB;AACrC,KAAMQ,CAAAA,OAAO,CAAGC,KAAK,CAACC,IAAN,CAAW,CAAEV,MAAF,CAAX,CAAuBW,QAAvB,CAAhB;AACA,KAAMC,CAAAA,KAAK,CAAGJ,OAAO;AAClBK,GADW,CACNC,KAAD,EAAY,mBAAkBA,KAAM,cAAaA,KAAM,MADhD;AAEXC,IAFW,CAEN,IAFM,CAAd;AAGA,KAAMC,CAAAA,MAAM,CAAGR,OAAO,CAACK,GAAR,CAAaC,KAAD,EAAY,QAAOA,KAAM,EAArC,EAAwCC,IAAxC,CAA6C,IAA7C,CAAf;AACA,KAAME,CAAAA,GAAG,CAAG,MAAMC,MAAN,CAAalB,MAAb,CAAZ;;;AAGA,MAAO,IAAImB,CAAAA,QAAJ;AACL,QADK;AAEL,QAFK;AAGJ,GAAEP,KAAM,kBAAiBI,MAAO,OAAMC,GAAI,EAHtC,CAAP;;AAKD,CAdD;;AAgBA,KAAMN,CAAAA,QAAQ,CAAG,SAAUS,KAAV,CAAiBN,KAAjB,CAAwB;AACvC,MAAOO,CAAAA,MAAM,CAACP,KAAD,CAAb;AACD,CAFD;;;;AAMAQ,MAAM,CAACC,OAAP,CAAiBzB,aAAjB","sourcesContent":["import { validateInput } from './validate.js'\n\n// Does a cartesian product on several arrays.\n// Returns an array with the results.\n// Optimized to be the fastest implementation in JavaScript.\nconst fastCartesian = function (arrays) {\n  validateInput(arrays)\n\n  if (arrays.length === 0) {\n    return []\n  }\n\n  const loopFunc = getLoopFunc(arrays.length)\n  const result = []\n  loopFunc(arrays, result)\n  return result\n}\n\nconst getLoopFunc = function (length) {\n  const cachedLoopFunc = cache[length]\n\n  if (cachedLoopFunc !== undefined) {\n    return cachedLoopFunc\n  }\n\n  const loopFunc = mGetLoopFunc(length)\n  // eslint-disable-next-line fp/no-mutation\n  cache[length] = loopFunc\n  return loopFunc\n}\n\nconst cache = {}\n\n// Create a function with `new Function()` that does:\n//   function(arrays, results) {\n//     for (const value0 of arrays[0]) {\n//       for (const value1 of arrays[1]) {\n//         // and so on\n//         results.push([value0, value1])\n//       }\n//     }\n//   }\nconst mGetLoopFunc = function (length) {\n  const indexes = Array.from({ length }, getIndex)\n  const start = indexes\n    .map((index) => `for (const value${index} of arrays[${index}]) {`)\n    .join('\\n')\n  const middle = indexes.map((index) => `value${index}`).join(', ')\n  const end = '}\\n'.repeat(length)\n\n  // eslint-disable-next-line no-new-func\n  return new Function(\n    'arrays',\n    'result',\n    `${start}\\nresult.push([${middle}])\\n${end}`,\n  )\n}\n\nconst getIndex = function (value, index) {\n  return String(index)\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = fastCartesian\n"],"file":"src/main.js"}